<?php namespace ProcessWire;


class FieldtypeGridSpace extends Fieldtype {

	public static function getModuleInfo() {

		return array(
			'title' => 'Grid Space',
			'version' => 0,
			'summary' => 'A grid selector for space design.',
			'singular' => true,
			'autoload' => true,
			'icon' => 'smile-o',
      'installs'=> 'InputfieldGridSpace'
			);
	}
	private $allowTextFormatters = true;
	public static $languageSupport = false;
	/**
	 * Return the default or if not set a blank value
	 *
	 */
	 protected function allowTextFormatters($allow = null) {
	 		if(!is_null($allow)) $this->allowTextFormatters = $allow ? true : false;
	 		return $this->allowTextFormatters;
	 	}

		/*
	public function getBlankValue(Page $page, Field $field) {
	 	$field->colnum = 12;
		return $field->colnum ? $field->colnum : '';
	}
	*/
	public function getInputfield(Page $page, Field $field) {
		$inputField = $this->modules->get('InputfieldGridSpace');
		$inputField->set('colnum', $field->colnum);

		return $inputField;
	}

	public function ___getCompatibleFieldtypes(Field $field) {
			$fieldtypes = $this->wire(new Fieldtypes());
			foreach($this->wire('fieldtypes') as $fieldtype) {
				if($fieldtype instanceof FieldtypeText) {
					$fieldtypes->add($fieldtype);
				} else {
					$className = $fieldtype->className();
					if($className == 'FieldtypeSelector') $fieldtypes->add($fieldtype);
				}
			}
			return $fieldtypes;
		}
  /**
  	 * Return the associated InputfieldGridSpace
  	 *
  	 */



	/**
	 * Format the value for output
	 * @param  Page   $page
	 * @param  Field  $field
	 * @param  mixed $value
	 * @return string
	 */
	public function ___formatValue(Page $page, Field $field, $value){

		$value = (string) $value;
		$textformatters = $field->get('textformatters');
		if($this->allowTextFormatters() && is_array($textformatters)) {
			foreach($textformatters as $name) {
				if(!$textformatter = $this->wire('modules')->get($name)) continue;
				$textformatter->formatValue($page, $field, $value);
			}
		}

		return $value;

	}



  /**
  	 * sanitize the value
  	 */
  	public function sanitizeValue(Page $page, Field $field, $value) {
  		return $value;
  	}


		public function getMatchQuery($query, $table, $subfield, $operator, $value) {
		/** @var DatabaseQuerySelectFulltext $ft */
		$ft = $this->wire(new DatabaseQuerySelectFulltext($query));
		$ft->match($table, $subfield, $operator, $value);
		return $query;
	}

	public function getDatabaseSchema(Field $field) {
		$schema = parent::getDatabaseSchema($field);
		$len = $this->wire('database')->getMaxIndexLength();
		$schema['data'] = 'text NOT NULL';
		$schema['keys']['data_exact'] = "KEY `data_exact` (`data`($len))";
		$schema['keys']['data'] = 'FULLTEXT KEY `data` (`data`)';
		return $schema;
	}


		/**
	 * set the config option fields for this field
	 *
	 */
	 public function ___getConfigInputfields(Field $field) {
		 $inputfields = parent::___getConfigInputfields($field);
		 $f = $this->modules->get("InputfieldInteger");
		 $f->attr('name', 'colnum');
		 $f->attr('size', 6);
		 $f->attr('value', $field->colnum);
		 $f->label = $this->_('Column amount');
		 $f->description = $this->_('Set the number of columns to choose in the field. ');
		 $f->notes = $this->_('Default if not set is 12 (based on Bootstrap).');
		 $inputfields->append($f);

		 return $inputfields;
	 }

}
